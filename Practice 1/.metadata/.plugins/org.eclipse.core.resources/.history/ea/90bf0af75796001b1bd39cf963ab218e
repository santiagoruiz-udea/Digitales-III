; Include derivative-specific definitions
            INCLUDE 'derivative.inc'
         
;
; Export symbols
;
            	 XDEF _Startup
            	 ABSENTRY _Startup
            	 
Mask_operator:   EQU	%00000011

; ----------------------------------------------------------------------------------------------
; -------------- Section to define variables in RAM, inside the zero page ---------------------
; ----------------------------------------------------------------------------------------------
                ORG    Z_RAMStart
; ---------------- Variables ----------------

OperandA:        DS.B   1           ; Contador
OperandB:        DS.B   1 
Operator:        DS.B   1
Result:        	 DS.B   1

; ----------------------------------------------------------------------------------------------
; -------------- Section to define variables in RAM, outside the zero page ---------------------
; ----------------------------------------------------------------------------------------------
            ORG    RAMStart

; Sección de código del programa. 
		ORG   ROMStart
 _Startup:
		; Power off WatchDOG
		LDA   #$20
		STA   SOPT1
		
		; Define stack beginning (Last RAM position)
		LDHX #RAMEnd+1
		TXS 		    
		
		; Limpiar Registros
		CLRA
		CLRX
		CLRH
		CLR OperandA
		CLR OperandB
		CLR Operator
		CLR Result

		MOV #$00,PTAD		; Port to get 
		MOV #$F8,PTADD		; P0 - Get Op.1, P1 - Get Op.2, P2 - Start
		MOV #$00,PTBD		; Port to get the operands
		MOV #$00, PTBDD
		MOV #$00,PTCD       ; Port to show the result
		MOV #$FF, PTCDD
		MOV #$00,PTDD       ; Port to show the results flags
		MOV #$03, PTDDD
		
; Body program
Wait: 	BRCLR   0,PTAD, Debounce
		BRCLR   1,PTAD, Debounce
		BRCLR   2,PTAD, Debounce
		BRA     Wait
		
Debounce:	LDHX #5000

Delay:		AIX  #-1
			CPHX #0
			BNE	 Delay	
			
			BRCLR 0,PTAD, Capture_Op_A
			BRCLR 1,PTAD, Capture_Op_B
			BRCLR 2,PTAD, Start_operation
			
Capture_Op_A:	MOV	PTBD, OperandA
				BRA	Wait

Capture_Op_B:	MOV	PTBD, OperandB
				BRA	Wait

Start_operation: MOV PTBD, Operator
				 LDA Operator
				 AND #Mask_operator
				 CMP #0
				 BNE Adition
				 CMP #1
				 BNE Substraction
				 CMP #2
				 BNE Multiplication
				 BNA Division

/*Adition:


Substraction:


Multiplication:


Division:*/				 
				 
				 
				 
				 
/*Inicio: ;

again:      LDA    Tabla,X        ; Cargo el valor  
            CMP    #64 
            BLO    Count1   ;branch if lower, for unsigned numb.
            CMP    #128
            BLO    Siga_2
            CMP    #192
            BLO    Siga_3
            AND    #MASK
            CMP    #30
            BLO    Siga_4
            BRA    Final
            
Count1:     CMP #45
            BNE Siga_1
            INC Contador1
Siga_1:     BRA Final

Siga_2:     AND #MASK 
            CMP #35
            BHS Count2
            BRA Final
Count2:     INC Contador2
            BRA Final
Siga_3:     AND #MASK
            CMP  #28
            BLS Final
            CMP #40
            BHI Final
            INC Contador3
            Bra Final      
Siga_4:     INC Contador4
Final:      INCX
            DBNZ Num_Estudiantes ,again
                   
            MOV Contador1, $00
            MOV Contador2, $02
            MOV Contador3, $04
            MOV Contador4, $06
Here:       BRA  Here

; los bits 7 y 6, identifican el programa del estudiante  
Tabla:      DC.B   %10011101    ; Est. De Ing. de Telecomunic.score 29
            DC.B   %01100011    ; Est. De Ing. Eléctrica
            DC.B   %10110000    
            DC.B   %01110010    
            DC.B   %00101101    ; Est. De Ing. Electrónica
            DC.B   %00101100    
            DC.B   %00100101    
            DC.B   %10101000    
            DC.B   %10100001    
            DC.B   %10000001    
            DC.B   %00100101    
            DC.B   %00110000    
            DC.B   %10001111    
            DC.B   %10011001    
            DC.B   %11011110  ; estudiante de Ing. Civil
            DC.B   %11011101
            DC.B   %00101101    
            DC.B   %01110000    
            DC.B   %11001000    
            DC.B   %11000111    
*/          
                       
            

;*                 Interrupt Vectors                          *
;**************************************************************

            ORG	$FFFE

			

			
			DC.W  _Startup			; Reset
